[unix_http_server]
file=/dev/shm/supervisor.sock ; (the path to the socket file)

[supervisord]
logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)
user=root		     ;

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///dev/shm/supervisor.sock ; use a unix:// URL  for a unix socket

[program:php-fpm]
command = /usr/local/sbin/php-fpm --nodaemonize
autostart=true
autorestart=true
priority=5
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nginx]
command=/usr/sbin/nginx -g "daemon off; error_log /dev/stderr info;"
autostart=true
autorestart=true
priority=10
stdout_events_enabled=true
stderr_events_enabled=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:incoming_supplier]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer incoming_supplier -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:incoming_supplier_data]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer incoming_supplier_data -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:incoming_message]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer incoming_message -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:outgoing_message]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer outgoing_message -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:incoming_request]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer incoming_request -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:outgoing_request]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer outgoing_request -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:incoming_user]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer incoming_user -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:outgoing_user]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer outgoing_user -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:outgoing_lead]
command=bash -c "sleep 3 && exec /srv/bin/console rabbitmq:consumer outgoing_lead -m 10 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[program:emails]
command=bash -c "sleep 1 && exec /srv/bin/console rabbitmq:consumer emails -m 1 --env=%(ENV_AWS_ENVIRONMENT)s"
autorestart=true

[include]
files = /etc/supervisor/conf.d/*.conf
